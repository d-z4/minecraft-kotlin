/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// plugin versioning
val VERSION = "2.2.0-RC2" // kotlin version

// base of output jar name, full jar will be "kotlin-runtime-jvm{VERSION}-{MINECRAFT_VERSION}.jar"
val OUTPUT_JAR_NAME = "kotlin-runtime"

// output jar text that indicates kotlin-reflect included
var useReflect = ""

tasks.named("distZip") {
    dependsOn(tasks.named("shadowJar"))
}

tasks.named("distTar") {
    dependsOn(tasks.named("shadowJar"))
}

tasks.named("startScripts") {
    dependsOn(tasks.named("shadowJar"))
}
tasks.named("startShadowScripts") {
    dependsOn(tasks.named("jar"))
}

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "2.2.0-RC2"
    id("com.gradleup.shadow") version "8.3.6"
    // maven() // no longer needed in gradle 7

    // Apply the application plugin to add support for building a CLI application.
    application
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    // paper
    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

// required configuration for using being able to configure 
// plugins by cli arguments
configurations {
    create("resolvableImplementation") {
        isCanBeResolved = true
        isCanBeConsumed = true
    }
}

dependencies {
    // Align versions of all Kotlin components
    compileOnly(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    configurations["resolvableImplementation"]("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    compileOnly("io.papermc.paper:paper-api:1.21.10-R0.1-SNAPSHOT")

    // optionally add kotlin-reflect api
    if ( project.hasProperty("reflect") === true ) {
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        useReflect = "-reflect"
    }
}

application {
    // Define the main class for the application.
    mainClass.set("phonon.kotlin.KotlinPluginKt")
}

tasks {
    named<ShadowJar>("shadowJar") {

        archiveClassifier.set("")

        // do NOT minimize (want entire kotlin runtime)
        //minimize()
    }
}


tasks {
    build {
        dependsOn(shadowJar)
    }
    
    test {
        testLogging.showStandardStreams = true
    }
}

gradle.taskGraph.whenReady {
    tasks {
        named<ShadowJar>("shadowJar") {
            archiveBaseName.set("${OUTPUT_JAR_NAME}${useReflect}-${VERSION}")
        }
    }
}